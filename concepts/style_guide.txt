Auto Trader Bot - Unified Style Guide
AI Refactoring Prompt
Copy this prompt when refactoring code:
Your job as an AI is to look at this code and remake it so that it matches our style guide WITHOUT changing any of the functionality. The code must work exactly the same way after refactoring. Only restructure for consistency and readability according to the style guide rules below.

üî• Core Principles

NEVER CHANGE FUNCTIONALITY - Code behavior must remain identical
Consistency over preference - All code should look like it was written by one person
Clean, chronological structure - Logical flow from top to bottom
No emojis in code - Professional, clean output only


‚ö†Ô∏è CRITICAL: DO NOT CHANGE (AutoTrader Specific)
Import Paths (FUNCTIONAL REQUIREMENT)

NEVER modify import paths - they are functional requirements, not style choices
Preserve ALL typos: system_databse (NOT system_database)
Keep full paths from APAC root:
pythonfrom database.db_manager import get_data_for_algorithm
from system_databse.system_db_manager import get_transactions
from orchestra.alpaca_wrapper import AlpacaWrapper

Preserve test file patterns:
pythonimport sys
sys.path.append('.')  # Must keep this exact pattern


Directory Names (EXACT - DO NOT CORRECT)

/algorithm/ (singular, NOT algorithms)
/system_databse/ (keep the typo!)
/orchestra/ (NOT orchestrator)
/database/
/frontend/

Function Signatures & Class Structure
Never change existing function names, parameters, or return types:

get_data_for_algorithm(ticker, requirement_type, **kwargs)
get_transactions(algo_id)
place_market_buy(ticker, shares)
place_market_sell(ticker, shares)

Algorithm class structure MUST remain:
pythonclass Algorithm:
    def __init__(self, ticker, initial_capital):
        self.ticker = ticker
        self.initial_capital = initial_capital
    
    def run(self, current_time, algo_id):
        # Must return tuple: (action, shares)
        return ('buy'/'sell'/'hold', shares)
Database & API Details

UTC timestamps with 'Z' suffix: Already matches our style guide ‚úì
Port 5001: Do not change (was 5000 in original design)
Table/column names: Keep exact spelling, even if incorrect


üìÅ File Structure
Header Comments (All Files)
Every file starts with a bold header comment:
Python:
python"""
################################################################################
# FILE: filename.py
# PURPOSE: Brief description of what this file does
################################################################################
"""
JavaScript:
javascript/*
################################################################################
# FILE: filename.js
# PURPOSE: Brief description of what this file does
################################################################################
*/
Import Organization

All imports at the very top (after header comment)
Group imports logically:

Standard library imports first
Third-party imports second
Local/project imports last


One blank line between groups


üñ®Ô∏è Print Statements / Logging Format

**IMPORTANT**: For all print statement formatting and logging, refer to the **AutoTrader Print Statement Overhaul Guide**. 

The print overhaul guide provides:
- Detailed formatting rules for time-sensitive vs non-time-sensitive events
- Status indicators: [OK], [ERROR], [WARN], [INFO]
- Decision tree for choosing appropriate format
- Examples of conditional vs declarative logging
- Complete transformation patterns

Key points from the print guide:
- Time-sensitive events (trades, market events): Include timestamp without milliseconds
- Non-time events (initialization, status): No timestamp needed
- All prints must verify actual state, not assume success
- Remove all emojis from print statements

When refactoring print statements, follow the print overhaul guide's systematic approach:
1. Identify if timing matters for the event
2. Choose appropriate status indicator
3. Convert from declarative to conditional where needed
4. Ensure actual state verification

üíª Code Style
Indentation

Python: 4 spaces (no tabs)
JavaScript: 2 spaces (no tabs)

Function Organization
Functions should be organized in chronological/logical order:

Initialization functions
Connection/setup functions
Main logic functions
Helper/utility functions
Cleanup functions

Section Headers
Use bold comment headers to separate major sections:
Python:
python################################################################################
# INITIALIZATION
################################################################################

# code here...

################################################################################
# MAIN TRADING LOGIC
################################################################################

# code here...
JavaScript:
javascript////////////////////////////////////////////////////////////////////////////////
// INITIALIZATION
////////////////////////////////////////////////////////////////////////////////

// code here...

////////////////////////////////////////////////////////////////////////////////
// MAIN TRADING LOGIC
////////////////////////////////////////////////////////////////////////////////

// code here...

üîß General Rules
Naming Conventions

Python: snake_case for functions/variables, PascalCase for classes
JavaScript: camelCase for functions/variables, PascalCase for classes
Constants: UPPER_SNAKE_CASE in both languages

Spacing

One blank line between function definitions
Two blank lines between class definitions
One blank line after imports

Comments

Explain WHY, not WHAT
Keep comments concise
Remove old/commented-out code

Test Blocks (Python)
Remove if __name__ == "__main__": blocks from all files except:

orchestra/orchestrator.py (the main entry point)
Files with critical initialization code (very rare)

python# ‚ùå REMOVE these test blocks:
if __name__ == "__main__":
    algo = Algorithm("AAPL", 10000)
    print(algo.run("2024-01-01T15:00:00Z", 1))
    
# ‚úÖ File should end with the last function/class

‚úÖ Refactoring Process (Follow in Order)
When you receive code to refactor:

First - Verify imports, paths, and function signatures remain EXACTLY the same
Add file header comment with the format shown above
Keep imports at top but DO NOT change their paths
Convert ALL print/log statements according to the **AutoTrader Print Statement Overhaul Guide**:

Follow the print guide's decision tree for format selection
Use [OK], [ERROR], [WARN], [INFO] status indicators
Add timestamps only for time-sensitive events
Convert declarative prints to conditional verification
Remove ALL emojis


Convert multi-line logging blocks to single-line format
Add section headers using # characters where logical
Fix indentation (4 spaces Python, 2 spaces JavaScript)
Reorganize functions in chronological/logical order
Remove commented-out code and clean up spacing
Remove if __name__ == "__main__": test blocks (keep ONLY if it's orchestrator.py or contains critical setup)

CRITICAL: After refactoring, the code must work EXACTLY as before. Only appearance changes!
REMEMBER: system_databse (typo) and /algorithm/ (singular) are CORRECT - do not "fix" them!

üìã Quick Reference

Timestamp format: datetime.now().strftime('%Y-%m-%dT%H:%M:%S') (no milliseconds)
Status tags: [OK], [ERROR], [WARN], [INFO]
No emojis: üö´ ‚ùå ‚ö†Ô∏è ‚Üí Replace with status tags
Headers: Use # characters for visual separation
Print formatting: Refer to AutoTrader Print Statement Overhaul Guide


üéØ Final Output Requirements
When refactoring code with this style guide:

Output Format: Always return the COMPLETE refactored code in an artifact
Artifact Type: Use appropriate type (Python ‚Üí application/vnd.ant.code with language="python")
Completeness: Include EVERY line of the original file (refactored)
Title: Use the original filename as the artifact title
No Truncation: The refactored code must be complete and ready to save/run

Remember: The person using this style guide expects to receive a fully refactored file in an artifact that they can immediately copy and use. Do not provide partial code or explanations outside the artifact.